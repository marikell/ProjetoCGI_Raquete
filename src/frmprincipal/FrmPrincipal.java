/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frmprincipal;

import classes.Bola;
import classes.Player;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Random;
import javax.swing.JLabel;

/**
 *
 * @author Marianne
 */
public class FrmPrincipal extends javax.swing.JFrame implements Runnable{

    /**
     * Creates new form FrmPrincipal
     */
    
    private boolean SetaEsquerda;
    private boolean SetaDireita;
    private boolean Start = true;
    private java.util.ArrayList<Bola> Bolas = new ArrayList<Bola>();
    private int QuantidadeBolas;
    
    public FrmPrincipal() {
        initComponents();
        //Criação do buffer e da thread
        createBufferStrategy(2);           
        Thread t = new Thread(this);
        t.start();
    }   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){            
            if(!Start){
            Initialize();
            Start = true;
            }            
        }
         if(evt.getKeyCode() == KeyEvent.VK_LEFT)      
            SetaEsquerda = true;
       
        else if(evt.getKeyCode() == KeyEvent.VK_RIGHT)        
            SetaDireita = true;      
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_LEFT)       
            SetaEsquerda = false;        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)            
            Start = true;        
        else if(evt.getKeyCode() == KeyEvent.VK_RIGHT)            
            SetaDireita = false;
        
    }//GEN-LAST:event_formKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPrincipal().setVisible(true);
            }
        });
    }
    
    public Color GenerateColor(int i){
        
        ArrayList<Color> Colors =new ArrayList<Color>() {{
        add(new Color(207,55,33));
        add(new Color(49,169,184));
        add(new Color(245,235,65));
        add(new Color(37,128,57));
        
        }};
        return Colors.get(i);
    }
    
    //Gera as Bolas
    public void Initialize(){
        for(int i =0; i<3;i++){
            Random Random = new Random();
            int PosBolaX = Random.nextInt(getWidth()-30);
            int PosBolaY = Random.nextInt(getHeight()-30);
            boolean Boolean = Random.nextBoolean();
            Bola Bola = new Bola(PosBolaX, PosBolaY,Boolean,30,30);
            Bola.setColor(GenerateColor(i));            
            Bolas.add(Bola);        
        }
    }

    @Override
    public void run() {      
        
        int XPlayer,YPlayer,IncrementaX=1, IncrementaY=1;
        //Variáveis que posicionam o Player no quadro.
        XPlayer = getWidth()/2-40;
        YPlayer = getHeight()-80;
         Player Player = new Player(XPlayer, YPlayer,15,80);
         Player.setColor(GenerateColor(3));
        Initialize();
        while(true){            
            //Inicializando o Graphics através do buffer.
            java.awt.Graphics g = getBufferStrategy().
            getDrawGraphics();
            //Start = true, significa que o jogo pode rodar.
            if(Start){
             //Inicializando a variável de contagem de bolas
             QuantidadeBolas = Bolas.size();
           //Criação do retãngulo maior para servir de "quadro"
           g.setColor(Color.WHITE);
           g.fillRect(0,0,getWidth(),getHeight()); 
           //Criação da Raquete (Player)
           
            Player.setPosX(XPlayer);
            Player.setPosY(YPlayer);
            //Desenhando a raquete na tela
            Player.desenhar(g);
            //Operações para o deslocamento do Player na Tela.
            XPlayer = XPlayer + IncrementaX;
            
            if(SetaDireita)
                IncrementaX = 1;
            else
                if(SetaEsquerda)
                    IncrementaX = -1;
                else
                    IncrementaX = 0;
            //Caso o Player tente ir para a esquerda do limite estipulado
            if(XPlayer<5){
                if(SetaEsquerda)
                    IncrementaX=1;
            }
            else if(XPlayer > getHeight()-5){
                if(SetaDireita)
                    IncrementaX=-1;
            }
            //Desenhando as bolas em posições aleatórias na tela
            for(int i = 0; i< Bolas.size();i++){
                Bola Bola = Bolas.get(i);
                Bola.desenhar(g);
                Bola.mover(getWidth(),getHeight(), XPlayer, YPlayer, Player.getWidth(), Player.getHeight(), Bolas);
            }
            try {
                Thread.sleep(4);
            } catch (InterruptedException ex) {
               
            }
            
            //Escrevendo o Texto "Bolas:"
            
            g.setFont(new Font("Helvetica Neue", Font.BOLD, 14)); 
            g.setColor(GenerateColor(1));
            g.drawString("BOLAS: " + Integer.toString(QuantidadeBolas), getWidth()-225, getHeight()-275);
            
            //Se a Quantidade de bolas for zero, devemos reiniciar a aplicação.
            if(Bolas.size() == 0)
                Start = false;
            
            g.dispose();
            getBufferStrategy().show();
            }
            
            //Start = false, portanto o jogo não poderá rodar, mostrando a tela de jogar novamente.
            else{
           g.setColor(Color.WHITE);
            g.fillRect(0,0,getWidth(),getHeight());
            g.setFont(new Font("Helvetica Neue", Font.BOLD, 14)); 
            g.setColor(GenerateColor(0));
            g.drawString("PRESSIONE ENTER PARA JOGAR NOVAMENTE!", getWidth()/2-160, getHeight()/2);
            g.setColor(GenerateColor(2));
            g.fillRect( getWidth()/2-160, getHeight()/2 + 5, 320, 3);
            g.dispose();
            getBufferStrategy().show();
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
